// Cycles.  for, foreach, while, do...while.

#region for 
//*** Действие до выполнения цыкла, Условие, ВЫполнение в {}, и последнее Действие после выполнения цыкла. 

/*
for (int i = 0; i < 4; i++) 
{
    Console.WriteLine($"i = {i}");
}
*/


// *** При этом необязательно именно в первой части цикла объявлять переменную, а в третий части изменять ее значение - это могут быть любые действия.
/*
var i = 1;

for (Console.WriteLine("Cycly start"); i < 4; Console.WriteLine($"i = {i}"))
{
    i++;
}
*/
// Описание: 1. Написать Cycly start. 2. Проверить условие i<4. 3. Добавить к i +1 (i++). 4. Написать i = ...

// *** Также стоит отметить, что можно определять несколько переменных в объявлении цикла:
/*
for (int i = 1, j = 2; i < 4; i++, j++)
{
    Console.WriteLine($"i = {i}, j = {j*j}");
}
*/
// *** break, continue.
/*

for (int i = 0; i < 10; i++)
{
    if (i % 2 == 1)     //показывает только четные числа.
    {
       // break;
        continue;  
    }
    Console.WriteLine(i);
}
*/

#endregion
#region do...while
//*** В цикле do сначала выполняется код цикла, а потом происходит проверка условия в инструкции while. И пока это условие истинно, цикл повторяется.
//*** цикл do гарантирует хотя бы единократное выполнение действий, даже если условие в инструкции while не будет истинно. 
/*
int i = -1;
do
{
    Console.WriteLine(i);
    i--;
}
while (i >= 0);
*/

#endregion

#region while
//*** В отличие от цикла do цикл while сразу проверяет истинность некоторого условия, и если условие истинно, то код цикла выполняется:
/*
int i = 5;
while (i > 0)
{
    Console.WriteLine(i);
    i--;
}
*/

#endregion

#region foreach 
// *** Цикл foreach предназначен для перебора набора или коллекции элементов.
// После оператора foreach в скобках сначала идет определение переменной. Затем ключевое слово in и далее коллекция, элементы которой надо перебрать.

/*
foreach (char a in "Aleksey")
{
    Console.WriteLine(a);
}
*/
// *** если неизвестно какая переменная то используем var.

/*
foreach(var c in "Tommas")
{
    Console.WriteLine(c);
}
*/
#endregion
#region Операторы continue и break
// *** break ситуация, когда требуется выйти из цикла, не дожидаясь его завершения.
/*
for (int i = 0; i < 5; i++)
{
    if (i == 3)
    {
        break;      // Доходит до 3 цыкла и останавливается
    }
    Console.WriteLine(i);
}
*/
// *** continue . Ситуация когда надо продолжить цыкл, когда выполниться условие.
/*
for (int i = 0; i < 6; i++)
{
    if (i == 3)
    {
        continue;       // Пропускает 3 цыкл, и вместо остановки, продолжает его.
    }
    Console.WriteLine(i);
}
*/
#endregion

#region Вложенные циклы  Таблица умножения.

/*
for (int i = 1; i < 10; i++)
{
    for (int j = 1; j < 10; j++)
    {
        Console.Write($"{i * j} \t");
    }
    Console.WriteLine();
}
*/
#endregion  
